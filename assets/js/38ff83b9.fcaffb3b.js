"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[7662],{7796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=t(4848),r=t(8453);const s={},i="7. Data Source Interfaces",o={id:"architecture/decisions/data-source-interfaces",title:"7. Data Source Interfaces",description:"Status",source:"@site/docs/architecture/decisions/0007-data-source-interfaces.md",sourceDirName:"architecture/decisions",slug:"/architecture/decisions/data-source-interfaces",permalink:"/docs/architecture/decisions/data-source-interfaces",draft:!1,unlisted:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/architecture/decisions/0007-data-source-interfaces.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"6. Data Source Registration",permalink:"/docs/architecture/decisions/data-source-registration"},next:{title:"8. Data Source Configuration",permalink:"/docs/architecture/decisions/data-source-configuration"}},c={},d=[{value:"Status",id:"status",level:2},{value:"Date",id:"date",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Current Implementation",id:"current-implementation",level:3},{value:"Interfaces",id:"interfaces",level:4},{value:"Aggregators",id:"aggregators",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Future Implications",id:"future-implications",level:3},{value:"Green Impact",id:"green-impact",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"7-data-source-interfaces",children:"7. Data Source Interfaces"})}),"\n",(0,a.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,a.jsx)(n.p,{children:"Accepted"}),"\n",(0,a.jsx)(n.h2,{id:"date",children:"Date"}),"\n",(0,a.jsx)(n.p,{children:"2022-11-1"}),"\n",(0,a.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,a.jsxs)(n.p,{children:["Data sources can meet the needs of multiple use-cases, but all data sources\nshould not be expected to meet all needs. Currently, the ",(0,a.jsx)(n.code,{children:"JsonDataSource"})," throws\na ",(0,a.jsx)(n.code,{children:"NotImplementedException"})," for forecast-related methods required by the\n",(0,a.jsx)(n.code,{children:"ICarbonAwareDataSource"})," interface. As functionality expands in this way it\nbecomes harder maintain data sources and it prevents programmatic understanding\nof which methods are actually available to the user."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, if someone wanted to expand functionality to include access to\npower generation sources (coal, hydro, solar, etc.), such a change breaks\nexisting data sources and likely forces them into a similar workaround of\nraising exceptions to meet the new interface. Users may similarly start to see a\n",(0,a.jsx)(n.code,{children:"power-consumption"})," command in the CLI that throws errors for the data source\nthey are using."]}),"\n",(0,a.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,a.jsxs)(n.p,{children:["The project will strive toward the\n",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Interface_segregation_principle",children:"interface segregation principle"}),"\nof ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/SOLID",children:"SOLID"})," design by using separate\ninterfaces for unique ",(0,a.jsx)(n.a,{href:"https://martinfowler.com/bliki/RoleInterface.html",children:"roles"}),"\nthat a data source may serve. This is often signalled by a different\nmodel/schema being returned by the methods."]}),"\n",(0,a.jsx)(n.p,{children:"A single data sources can implement multiple interfaces."}),"\n",(0,a.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,a.jsx)(n.h3,{id:"current-implementation",children:"Current Implementation"}),"\n",(0,a.jsx)(n.h4,{id:"interfaces",children:"Interfaces"}),"\n",(0,a.jsxs)(n.p,{children:["To align with this decision, the ",(0,a.jsx)(n.code,{children:"ICarbonIntensityDataSource"})," interface would be\nbroken into two interfaces:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"IEmissionsDataSource"})," \u2013 for data sources of measured emissions data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"IForecastDataSource"})," \u2013 for data sources of forecasted emissions data"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"aggregators",children:"Aggregators"}),"\n",(0,a.jsx)(n.p,{children:"There is also no need for these data sources to have a shared aggregator as none\nof the existing aggregator functions leverage both types of data together. Thus,\nthere should be two corresponding aggregators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"EmissionsAggregator"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ForecastAggregator"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Each aggregator should have its own parameters class, however the appropriate\nway to split up the existing ",(0,a.jsx)(n.code,{children:"CarbonAwareParameters"})," class is less\nstraight-forward due to the large amount of shared code. How to split up this\nclass should be the subject of its own ADR, and it should continue to be shared\nby both aggregators until an agreed upon design has been reached."]}),"\n",(0,a.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.p,{children:"Each data source type should be independently configurable. So an example config\nof"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "carbonAwareVars": {\n    "carbonIntensityDataSource": "WattTime"\n    // ...\n  }\n  // ...\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"becomes the following with no user-facing changes since WattTime implements both\ninterfaces:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "carbonAwareVars": {\n    "emissionsDataSource": "WattTime",\n    "forecastDataSource": "WattTime"\n    // ...\n  }\n  // ...\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"But it now becomes possible to configure different sources for each type."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "carbonAwareVars": {\n    "emissionsDataSource": "JSON",\n    "forecastDataSource": "WattTime"\n    // ...\n  }\n  // ...\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Other Config Considerations"})," ",(0,a.jsx)(n.em,{children:"When no data source is specified..."})," Use a\ndefault data source following the\n",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Null_object_pattern",children:"null object pattern"})," to\nprovide empty, but strongly-typed responses."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"When the data source type is not implemented by the specified data source..."}),"\nThrow an exception, alerting the operator to improper configuration."]}),"\n",(0,a.jsx)(n.h3,{id:"future-implications",children:"Future Implications"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"New Aggregators"})," A hypothetical feature which returned the differences between\nforecasted emissions and measured emissions would implement a\n",(0,a.jsx)(n.code,{children:"ForecastEmissionsAggregator"})," to get the data from both sources and do the\ncalculations."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"New Interfaces"})," A hypothetical feature which exposed power generation data\nwould create an ",(0,a.jsx)(n.code,{children:"IPowerGenerationDataSource"})," which any data source with access\nto such data could implement."]}),"\n",(0,a.jsxs)(n.p,{children:['It would be configured by operators the same way as existing data source types,\nby looking up the matching name of the interface (without the leading "I") in\nthe ',(0,a.jsx)(n.code,{children:"carbonAwareVars"})," section of the config."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "carbonAwareVars": {\n    "emissionsDataSource": "JSON",\n    "forecastDataSource": "WattTime",\n    "powerGenerationDataSource": "MyNewDataSourceName"\n    // ...\n  }\n  // ...\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Features would be exposed to consumers via a ",(0,a.jsx)(n.code,{children:"PowerGenerationAggregator"})," or some\njoint aggregator that merges data with another source, depending on the\nuse-case."]}),"\n",(0,a.jsx)(n.h2,{id:"green-impact",children:"Green Impact"}),"\n",(0,a.jsx)(n.p,{children:"Neutral"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);